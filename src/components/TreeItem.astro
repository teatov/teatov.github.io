---
import musicInfo from '@/lib/musicInfo.json';

export type TreeFile = {
  type: 'file';
  name: string;
};

export type TreeDirectory = {
  type: 'directory';
  name: string;
  contents: (TreeDirectory | TreeFile)[];
};

export type ItemInfo = {
  link: string;
  info: string;
};

interface Props {
  directory: TreeDirectory;
}

const { directory } = Astro.props;
const directoryInfo = musicInfo[directory.name as keyof typeof musicInfo] as
  | ItemInfo
  | undefined;
---

<details class="tree-item">
  <summary
    class="relative cursor-pointer text-grey-light outline-none hover:bg-grey-dark hover:text-white focus-visible:bg-grey-dark focus-visible:text-white"
  >
    <span>{directory.name}</span>
    {
      directoryInfo && directoryInfo.info && (
        <details>
          <summary class="absolute -top-0 right-4 cursor-pointer bg-black text-grey-light outline-none hover:bg-grey-dark hover:text-white focus-visible:bg-grey-dark focus-visible:text-white">
            info!
          </summary>
          <p class="prose max-w-40 bg-grey-dark text-white">
            <Fragment set:html={directoryInfo.info} />
          </p>
        </details>
      )
    }
    {
      directoryInfo && directoryInfo.link && (
        <div class="absolute -top-0 right-0">
          <a
            href={directoryInfo.link}
            class="bg-black text-cyan outline-none hover:bg-blue-dark hover:text-white focus-visible:bg-blue-dark focus-visible:text-white"
            rel="nofollow, noopener, noreferrer"
          >
            link!
          </a>
        </div>
      )
    }
  </summary>
  <ul class="ml-1 list-disc list-outside">
    {
      directory.contents
        .sort((a, b) =>
          a.type !== b.type
            ? a.type.localeCompare(b.type, undefined, { numeric: true })
            : a.name.localeCompare(b.name, undefined, { numeric: true })
        )
        .map((item) => {
          if (item.type === 'file') {
            const name = item.name.replace('.mp3', '');
            const trackInfo = musicInfo[name as keyof typeof musicInfo] as
              | ItemInfo
              | undefined;
            return (
              <li class="relative ml-1">
                <p>{name}</p>
                {trackInfo && trackInfo.info && (
                  <details>
                    <summary class="absolute -top-0 right-4 cursor-pointer bg-black text-grey-light outline-none hover:bg-grey-dark hover:text-white focus-visible:bg-grey-dark focus-visible:text-white">
                      info!
                    </summary>
                    <p class="prose max-w-40 bg-grey-dark">
                      <Fragment set:html={trackInfo.info} />
                    </p>
                  </details>
                )}
                {trackInfo && trackInfo.link && (
                  <div class="absolute -top-0 right-0">
                    <a
                      href={trackInfo.link}
                      class="bg-black text-cyan outline-none hover:bg-blue-dark hover:text-white focus-visible:bg-blue-dark focus-visible:text-white"
                      rel="nofollow, noopener, noreferrer"
                    >
                      link!
                    </a>
                  </div>
                )}
              </li>
            );
          } else if (item.type === 'directory' && item.contents) {
            return <Astro.self directory={item} />;
          }
        })
    }
  </ul>
</details>
